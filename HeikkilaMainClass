//AUTHOR: Joseph Heikkila
//COURSE: CPT 187
//PURPOSE: Calculate discounts, final sales, items sold, and discounts used
//CREATEDATE: 2/16/2022
package edu.cpt.heikkila.exercise6;

//Scanner
import java.util.Scanner;

//MainClass
public class MainClass 
{
	//CONSTANTS
	public static final char[] MENU_CHARS = {'A','B','Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A','B','R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A','B','C','D'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	public static final String ACCOUNT_FILE_NAME = "MasterUserFile.dat";
	
	//main
	public static void main(String[] args) 
	{
		//instantiation statements
		Order currentOrder = new Order();
		Inventory currentInventory = new Inventory();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNT_FILE_NAME);
		Scanner input = new Scanner(System.in);

		//Displays the Welcome banner
		displayWelcomeBanner(); 
		
		//String userName;
		//Prime Read
		char menuSelection = validateMenuSelection(input); 
		
		//Run-While
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			
			
			String userName = getUserName(input);
			
			//Check to create an account
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//checks if user name exists
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//END if name exists
				//Creates account
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//END else create account
			}//END of if Check account
			else 
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				//check for user
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//END if user check
				else
				{
					menuSelection = validateFileSelection(input);
					//File menu loop
					while (menuSelection !='R')
					{
						//load Items
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//Check for file
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//End of if check for file
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//End of else check file
						}//End of if load items
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							//Check search index
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//END of if search index
							else
							{
								//retrieve order info
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemIDs(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));
								
								//Check if out of stock
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//END of if out of stock
								else
								{
									//Retrieve discount info
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									//Write the Order
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									
									//Check discount rate
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END if discount rate
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of else discount rate
								}//END of else check out of stock
							}//END of else search index
						}//End of else load items
						menuSelection = validateFileSelection(input);
					}//End file Menu loop
				}//Else user check
			}//END of else check account
			menuSelection = validateMenuSelection(input); 
		}//END of Run-While
		
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		
		//Check Record Count
		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());	
		}
		
		//Farewell Message
		displayFarewellMessage();
		
		//Close Scanner
		input.close();
	}//END main
	
	//VOIDS
	
	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the Sod Shop Program!");
		System.out.println("This program will allow you to calculate the final cost ");
		System.out.println("of your purchase after applying the appropriate discount and");
		System.out.println("show the grand total of sales and number of discounts used.");
		System.out.println("************************************************************\n");
	}//END Welcome Banner
	
	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("\n\nThank you for using the Sod Shop Program!");
		System.out.println("Have a wonderful day!");
	}//END Farewell Message
	
	//Main Menu
	public static void displayMainMenu()
	{
		//variable
		int localIndex = 0;
		//Title
		System.out.println("\n************************************************************");
		System.out.println("MAIN MENU");
		
		//Repeat menu lines
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-1c%-5s%-13s\n", MENU_CHARS[localIndex], " for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END repetition structure
		
		//Prompt
		System.out.println("************************************************************");
		System.out.print("Enter your selection here: ");
	}//END Main Menu
	
	//File Menu
	public static void displayFileMenu()
	{
		//variable
		int localIndex = 0;
		//Title
		System.out.println("\n************************************************************");
		System.out.println("FILE MENU");
		
		//Repeat menu lines
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-1c%-5s%-13s\n", FILE_MENU_CHARS[localIndex], " for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END repetition structure
		
		//Prompt
		System.out.println("************************************************************");
		System.out.print("Enter your selection here: ");
	}//END File Menu
	
	//Discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//variable
		int localIndex = 0;
		
		//Title
		System.out.println("\n************************************************************");
		System.out.println("DISCOUNT MENU");
		
		//Repetition structure
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-1c%-5s%-19s%4.1f%-1s\n", SUB_MENU_CHARS[localIndex], " for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100, "%");
			localIndex++;
		}//END repetition structure 
		
		//Prompt
		System.out.println("************************************************************");
		System.out.print("Please make your selection here: ");
	}//END Discount Menu
	
	//File error
	public static void displayFileError()
	{
		System.out.println("\n************************************************************");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("************************************************************\n");
		
	}//END file error
	
	//value not found
	public static void displayNotFound()
	{
		System.out.println("\n************************************************************");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("************************************************************\n");
		
	}//END not found
	
	//Login Error
	public static void displayLoginError()
	{
		System.out.println("\n************************************************************");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("************************************************************\n");
		
	}//END not found
	
	//Out of Stock
	public static void displayOutOfStock()
	{
		System.out.println("\n************************************************************");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("************************************************************\n");
	}//END Out of Stock
	
	//Record Report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("\n************************************************************");
		System.out.println("RECORD REPORT");
		System.out.printf("%2d%-19s\n", borrowedRecordCount, " records processed");
		System.out.println("************************************************************\n");
		
	}//END record report
	
	//Account Results(create account)
	public static void displayAccountResults()
	{
		System.out.println("\n************************************************************");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("************************************************************\n");
		
	}//END Account Results
	
	//Account Results(Account Exists)
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("\n************************************************************");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, "+ borrowedUserName +", already exists");
		System.out.println("************************************************************\n");
		
	}//END Account Results
	
	//Order Report (no discount)
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName,double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedStockCount)
	{
		System.out.println("\n************************************************************");
		System.out.println("ORDER REPORT");
		System.out.println("************************************************************");
		System.out.printf("%-16s%4s%-19s\n\n", "Customer Name:","",borrowedUserName);
		System.out.printf("%-16s%4s%-19s\n", "Item Name:","",borrowedItemName);
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Item Price:","","$",borrowedItemPrice);
		System.out.printf("%-16s%6s%9d\n\n", "Quantity:","",borrowedHowMany);
		System.out.printf("%-16s%4s%-2s%9.2f\n", "Subtotal:","","$",borrowedSubTotal);
		System.out.printf("%-16s%6s%8.1f%2s\n", "Tax Rate:","",borrowedTaxRate * 100," %");
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Tax Amount:","","$",borrowedTax);
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Order Total:","","$",borrowedTotalCost);
		System.out.printf("%-16s%4s%-19s\n\n", "Prize:","",borrowedPrizeName);
		System.out.printf("%-18s%2d%-16s\n", "Buy more now: Only", borrowedStockCount, " left in stock!");
		System.out.println("***********************************************************\n");
	}//End Order Report (no discount)
	
	//Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName,double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedStockCount)
	{
		System.out.println("\n************************************************************");
		System.out.println("ORDER REPORT");
		System.out.println("************************************************************");
		System.out.printf("%-16s%4s%-19s\n\n", "Customer Name:","",borrowedUserName);
		System.out.printf("%-16s%4s%-19s\n", "Item Name:","",borrowedItemName);
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Item Price:","","$",borrowedItemPrice);
		System.out.printf("%-16s%4s%-19s\n", "Discount Name:","",borrowedDiscountName);
		System.out.printf("%-16s%6s%8.1f%2s\n", "Discount Rate:","",borrowedDiscountRate * 100," %");
		System.out.printf("%-16s%4s%-2s%9.2f\n", "Discount Amount:","","$",borrowedDiscountAmt);
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Discount Price:","","$",borrowedDiscountPrice);
		System.out.printf("%-16s%6s%9d\n\n", "Quantity:","",borrowedHowMany);
		System.out.printf("%-16s%4s%-2s%9.2f\n", "Subtotal:","","$",borrowedSubTotal);
		System.out.printf("%-16s%6s%8.1f%2s\n", "Tax Rate:","",borrowedTaxRate * 100," %");
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Tax Amount:","","$",borrowedTax);
		System.out.printf("%-16s%4s%-2s%9.2f\n\n", "Order Total:","","$",borrowedTotalCost);
		System.out.printf("%-16s%4s%-19s\n\n", "Prize:","",borrowedPrizeName);
		System.out.printf("%-18s%2d%-16s\n", "Buy more now: Only", borrowedStockCount, " left in stock!");
		System.out.println("***********************************************************\n");
	}//End Order Report
	
	//Final Report
	public static void displayFinalReport(int[] borrowedIDs, String[] borrowedNames, double[] borrowedPrices, int[] borrowedQuantities, double[] borrowedTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		//variables
		int localIndex = 0;

		
		//Title
		System.out.println("\n************************************************************");
		System.out.println("FINAL REPORT");
		System.out.println("************************************************************");
		System.out.printf("\n%-6s%-24s%-10s%-6s%-10s\n", " ID", "NAME", " PRICE", "QTY", " TOTAL");
		
		//repetition structure Item Lines
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%4d%-2s%-24s%-2s%5.2f%-2s%3d%-3s%-2s%5.2f\n", borrowedIDs[localIndex],"", borrowedNames[localIndex],"$", borrowedPrices[localIndex],"", borrowedQuantities[localIndex], "", "$", borrowedTotals[localIndex]);
			localIndex++;
		}//END repetition structure
		System.out.println("\nGRAND TOTAL");
		System.out.printf("%-2s%8.2f\n", "$", borrowedGrandTotal);
		
		System.out.println("************************************************************\n");
	}//END Final Report
	
	//VRs
	
	//User Name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;
		
	}//END User Name
	
	//Password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
		
	}//END Password
	
	//retrieve file name from user
	public static String getFileName(Scanner borrowedInput)
	{
		System.out.println("\n************************************************************");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");
		String localFileName = borrowedInput.next();
		
		return localFileName;
	}//END file name retrieval
	
	//Validate Main Menu
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//validation loop
		while (localSelection!= MENU_CHARS[0] && localSelection!= MENU_CHARS[1] && localSelection!= MENU_CHARS[2])
		{
			//Error Message
			System.out.println("\n************************************************************");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("************************************************************");
			
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			
		}//END validation loop
		
		return localSelection;
	
	}//END Validate Main Menu
	
	//Validate File Menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//validation loop
		while (localSelection!= FILE_MENU_CHARS[0] && localSelection!= FILE_MENU_CHARS[1] && localSelection!= FILE_MENU_CHARS[2])
		{
			//Error Message
			System.out.println("\n************************************************************");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("************************************************************");
			
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			
		}//END validation loop
		
		return localSelection;
	
	}//END Validate File Menu
	
	//Validate Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//validation loop
		while (localSelection!= SUB_MENU_CHARS[0] && localSelection!= SUB_MENU_CHARS[1] && localSelection!= SUB_MENU_CHARS[2] && localSelection!= SUB_MENU_CHARS[3])
		{
			//Error Message
			System.out.println("\n************************************************************");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("************************************************************");
			
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);	
		}//END validation loop
		
		return localSelection;
	
	}//END Validate Discount Menu
	
	//Validate How Many
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		//Input
		System.out.print("\nHow many are you purchasing? ");
		localHowMany = borrowedInput.nextInt();
		
		//Validation loop
		while (localHowMany <= 0)
		{
			//Error Message
			System.out.println("\n************************************************************");
			System.out.println("The value entered is invalid. Please try again.");
			System.out.println("************************************************************");
	
			System.out.print("\nHow many are you purchasing? ");
			localHowMany = borrowedInput.nextInt();
		}//END validation loop 
		
		return String.valueOf(localHowMany);
	}//END Validate How Many
	
	//Validate Search Value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		System.out.println("\n************************************************************");
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.nextInt();
		
		//validation loop
		while (localSearchValue <= 0)
		{
			//Error Message
			System.out.println("\n************************************************************");
			System.out.println("The value entered is invalid. Please try again.");
			System.out.println("************************************************************");
			
			System.out.print("Enter the search value: ");
			localSearchValue = borrowedInput.nextInt();
			
		}//END validation loop
		
		return localSearchValue;
	}//End validate Search value
}//END MainClass
